import org.gradle.internal.jvm.Jvm

apply plugin: 'com.android.library'
apply plugin: 'com.vanniktech.maven.publish'

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        minSdkVersion project.minSdkVersion

        consumerProguardFiles 'proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility = sourceCompatibilityVersion
        targetCompatibility = targetCompatibilityVersion
    }

    buildFeatures {
        buildConfig = false
    }
}

task copyTestResources {
    copy {
        from "${projectDir}/src/test/resources"
        into "${buildDir}/intermediates/sourceFolderJavaResources/debug"
    }

    copy {
        from "${projectDir}/src/test/resources"
        into "${buildDir}/intermediates/sourceFolderJavaResources/release"
    }
}

preBuild.dependsOn copyTestResources

dependencies {
    api project(':shortbread-annotations')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'org.mockito:mockito-core:3.7.7'
    testImplementation 'com.google.truth:truth:1.1.2'
    testImplementation 'com.google.testing.compile:compile-testing:0.19'
    testImplementation project(':shortbread-compiler')
    testImplementation files(getRuntimeJar())
    testImplementation files(Jvm.current().getToolsJar())
}

static def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
        File runtimeJar = new File(javaBase, "lib/rt.jar")
        if (runtimeJar.exists()) {
            return runtimeJar
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar")
        return runtimeJar.exists() ? runtimeJar : null
    } catch (IOException e) {
        throw new RuntimeException(e)
    }
}
